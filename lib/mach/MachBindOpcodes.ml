    (*
     * Some uses of external symbols do not need to be bound immediately.
     * Instead they can be lazily bound on first use.  The lazy_bind
     * are contains a stream of BIND opcodes to bind all lazy symbols.
     * Normal use is that dyld ignores the lazy_bind section when
     * loading an image.  Instead the static linker arranged for a
     * lazy pointer to initially point to a helper function which 
     * pushes the offset into the lazy_bind area for the symbol
     * needing to be bound, then jumps to dyld which simply adds
     * the offset to lazy_bind_off to get the information on what 
     * to bind.  
     *)

(*
 * The following are used to encode binding information
 *)
let kBIND_TYPE_POINTER                                  = 1
let kBIND_TYPE_TEXT_ABSOLUTE32			        = 2
let kBIND_TYPE_TEXT_PCREL32				= 3

let kBIND_SPECIAL_DYLIB_SELF				= 0
let kBIND_SPECIAL_DYLIB_MAIN_EXECUTABLE		        = 0xf (* 15 *)
let kBIND_SPECIAL_DYLIB_FLAT_LOOKUP			= 0xe (* 14 *)
(*  
let kBIND_SPECIAL_DYLIB_MAIN_EXECUTABLE		        = -1
let kBIND_SPECIAL_DYLIB_FLAT_LOOKUP			= -2

*)

let kBIND_SYMBOL_FLAGS_WEAK_IMPORT			= 0x1
let kBIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION		= 0x8

let kBIND_OPCODE_MASK					= 0xF0
let kBIND_IMMEDIATE_MASK				= 0x0F
let kBIND_OPCODE_DONE					= 0x00
let kBIND_OPCODE_SET_DYLIB_ORDINAL_IMM			= 0x10
let kBIND_OPCODE_SET_DYLIB_ORDINAL_ULEB			= 0x20
let kBIND_OPCODE_SET_DYLIB_SPECIAL_IMM			= 0x30
let kBIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM		= 0x40
let kBIND_OPCODE_SET_TYPE_IMM				= 0x50
let kBIND_OPCODE_SET_ADDEND_SLEB			= 0x60
let kBIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB		= 0x70
let kBIND_OPCODE_ADD_ADDR_ULEB				= 0x80
let kBIND_OPCODE_DO_BIND				= 0x90
let kBIND_OPCODE_DO_BIND_ADD_ADDR_ULEB			= 0xA0
let kBIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED		= 0xB0
let kBIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB	= 0xC0

(* TODO: remove these? *)
type bind_misc  = BIND_TYPE_POINTER |
		   BIND_TYPE_TEXT_ABSOLUTE32			   |
		   BIND_TYPE_TEXT_PCREL32			   |
		   BIND_SPECIAL_DYLIB_SELF			   |
		   BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE		    |
		   BIND_SPECIAL_DYLIB_FLAT_LOOKUP		    |

		   BIND_SYMBOL_FLAGS_WEAK_IMPORT		     |
		   BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION	     |

		   BIND_OPCODE_MASK				      |
		   BIND_IMMEDIATE_MASK

(*
let get_misc misc =
  match opcode with
  | 1    ->  BIND_TYPE_POINTER
  | 2    ->  BIND_TYPE_TEXT_ABSOLUTE32
  | 3    ->  BIND_TYPE_TEXT_PCREL32			   
  | 0	 ->  BIND_SPECIAL_DYLIB_SELF			   
  | -1	 ->  BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE		    
  | -2	 ->  BIND_SPECIAL_DYLIB_FLAT_LOOKUP		    
  | 0x1	 ->  BIND_SYMBOL_FLAGS_WEAK_IMPORT		     
  | 0x8	 ->  BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION	     
  | 0xf0 ->  BIND_OPCODE_MASK      
  | 0x0f ->  BIND_IMMEDIATE_MASK
*)

exception Bad_opcode of int

type bind_opcode = 
  | BIND_OPCODE_DONE
  | BIND_OPCODE_SET_DYLIB_ORDINAL_IMM
  | BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB
  | BIND_OPCODE_SET_DYLIB_SPECIAL_IMM
  | BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM
  | BIND_OPCODE_SET_TYPE_IMM
  | BIND_OPCODE_SET_ADDEND_SLEB
  | BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
  | BIND_OPCODE_ADD_ADDR_ULEB
  | BIND_OPCODE_DO_BIND
  | BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB
  | BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED
  | BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB

let get_opcode opcode =
  match opcode with
  | 0x00 ->  BIND_OPCODE_DONE
  | 0x10 ->  BIND_OPCODE_SET_DYLIB_ORDINAL_IMM
  | 0x20 ->  BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB
  | 0x30 ->  BIND_OPCODE_SET_DYLIB_SPECIAL_IMM
  | 0x40 ->  BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM
  | 0x50 ->  BIND_OPCODE_SET_TYPE_IMM
  | 0x60 ->  BIND_OPCODE_SET_ADDEND_SLEB
  | 0x70 ->  BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
  | 0x80 ->  BIND_OPCODE_ADD_ADDR_ULEB
  | 0x90 ->  BIND_OPCODE_DO_BIND
  | 0xa0 ->  BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB
  | 0xb0 ->  BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED
  | 0xc0 ->  BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB
  | _ -> raise @@ Bad_opcode opcode

let opcode_to_string opcode =
  match opcode with
  | BIND_OPCODE_DONE -> "BIND_OPCODE_DONE"
  | BIND_OPCODE_SET_DYLIB_ORDINAL_IMM -> "BIND_OPCODE_SET_DYLIB_ORDINAL_IMM"
  | BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB -> "BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB"
  | BIND_OPCODE_SET_DYLIB_SPECIAL_IMM -> "BIND_OPCODE_SET_DYLIB_SPECIAL_IMM"
  | BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM -> "BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM"
  | BIND_OPCODE_SET_TYPE_IMM -> "BIND_OPCODE_SET_TYPE_IMM"
  | BIND_OPCODE_SET_ADDEND_SLEB -> "BIND_OPCODE_SET_ADDEND_SLEB"
  | BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB -> "BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB"
  | BIND_OPCODE_ADD_ADDR_ULEB -> "BIND_OPCODE_ADD_ADDR_ULEB"
  | BIND_OPCODE_DO_BIND -> "BIND_OPCODE_DO_BIND"
  | BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB -> "BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB"
  | BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED -> "BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED"
  | BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB -> "BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB"
